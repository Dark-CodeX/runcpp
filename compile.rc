if os == 'windows'
    depends('cl.exe') # *.exe is important
else
    depends('clang++')
    depends('mv')
endif

[compiler]:
    compiler = 'clang++'

[arguments]:
    release_args = ['-std=c++2a', '-O3', '-DNDEBUG', '-march=native', '-mtune=native', '-masm=intel', '-flto']
    debug_args = ['-std=c++2a', '-g', '-ggdb3', '-Wall', '-Wextra', '-Wuninitialized', '-Wstrict-aliasing', '-Wshadow', '-pedantic']

import "./runcpp/compile.rc"

# here we are using `all`, which means every command is executed like a separate process
[all]:
    release()
    debug()
    if os == 'linux'
        install()
    endif

# cl /std:c++latest /O2 /DNDEBUG /EHsc /Fo./obj/ /Fe./bin/runcpp ./runcpp/src/caller/caller.cc ./runcpp/src/io/io.cc ./runcpp/src/os/os.cc ./runcpp/src/parser/command_generator.cc ./runcpp/src/parser/draw_error.cc ./runcpp/src/parser/import_helper.cc ./runcpp/src/parser/miscellaneous.cc ./runcpp/src/parser/serialize_deserialize_merge.cc ./runcpp/src/parser/helper_functions.cc ./runcpp/src/parser/parser.cc ./runcpp/src/main/main.cc
# cl /std:c++latest /W4 /wd4351 /wd4150 /wd4456 /TP /MDd /Fo./obj/ /Fe./bin/runcpp_debug ./runcpp/src/caller/caller.cc ./runcpp/src/io/io.cc ./runcpp/src/os/os.cc ./runcpp/src/parser/command_generator.cc ./runcpp/src/parser/draw_error.cc ./runcpp/src/parser/import_helper.cc ./runcpp/src/parser/miscellaneous.cc ./runcpp/src/parser/serialize_deserialize_merge.cc ./runcpp/src/parser/helper_functions.cc ./runcpp/src/parser/parser.cc ./runcpp/src/main/main.cc
